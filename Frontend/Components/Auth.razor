@using Core.Requests
@using Frontend.Services.Interfaces
@using Frontend.StateContainers
@using Frontend.ViewModels
@inject IAuthenticationServiceUI AuthServiceUi 
@inject NavigationManager NavigationManager
@inject AuthViewModel ViewModel
@inject AuthComponentStateContainer State

<Card>
    <CardHeader>
        <div class="flex-row" style="justify-content: space-between;">
            <div @onclick="ViewModel.SetLoginState" style="cursor: pointer">
                <Text Content="Sign in" SizeInRem="2" Weight="FontWeights.W900"
                      GradientColors="@(State.IsLoginState ? Colors.PrimarySecondary : Colors.TextDisabled)" ShowGradient/>
            </div>
            <div>
                <Text Content="/" SizeInRem="2" Weight="FontWeights.W900"
                      GradientColors="@Colors.PrimarySecondary" ShowGradient/>
            </div>
            <div @onclick="ViewModel.SetRegistrationState" style="cursor: pointer">
                <Text Content="Sign up" SizeInRem="2" Weight="FontWeights.W900"
                      GradientColors="@(State.IsLoginState ? Colors.TextDisabled : Colors.PrimarySecondary)" ShowGradient/>
            </div>
        </div>
    </CardHeader>
    
    <CardContent>
            @if (State.IsLoginState)
            {
                <Animate Type="AnimationType.Fade" FromOpacity="0" ToOpacity="100" Iteration="1"  Duration="0.3s">
                    <div class="flex-col">
                        <Input Label="Email" Placeholder="Your Email" TItem="string"
                               @bind-Value="State.Email" Style="width: 15rem"/>
                        <Input Label="Password" Placeholder="Your Password" TItem="string"
                               @bind-Value="State.Password" Type="password" Style="width: 15rem"/>
                        <Text Color="red" Content="@State.ErrorMessage" Style="max-width: 15rem"/>
                    </div>
                </Animate>
            }
            else // registration state
            {
                <Animate Type="AnimationType.Fade" FromOpacity="0" ToOpacity="100" Iteration="1" Duration="0.3s">
                    <div class="flex-col">
                        <Input Label="Username" Placeholder="Your desired username"
                               @bind-Value="State.Username" TItem="string" Style="width: 15rem"/>
                        <Input Label="Email" Placeholder="Your Email"
                               @bind-Value="State.Email" TItem="string" Style="width: 15rem"/>
                        <Input Label="Password" Placeholder="Your Password"
                               @bind-Value="State.Password" TItem="string" Type="password" Style="width: 15rem"/>
                        <Input Label="Repeat Password" Placeholder="Repeat Your Password"
                               @bind-Value="State.RepeatPassword" TItem="string" Type="password" Style="width: 15rem"/>
                        <Text Color="red" Content="@State.RegistrationErrorMessage" Style="max-width: 15rem"/>
                        <Text Color="red" Content="@State.ErrorMessage" Style="max-width: 15rem"/>
                    </div>
                </Animate>
            }
    </CardContent>
    
    <CardFooter>
        <Button Type="ButtonType.Outline" Icon="arrow_back" Style="margin: 1rem"
                OnClick="ViewModel.HandleBackButtonClicked"></Button>
        @if (State.IsLoginState)
        {
            <Button Type="ButtonType.Outline" Style="margin: 1rem;"
                    Class="kizuku-button"
                    OnClick="ViewModel.HandleLogin" disabled="@State.IsProcessing">
                @if (State.IsProcessing) { <span>Processing...</span> } else { <span>Sign In</span> }
            </Button>
        }
        else
        {
            <Button Type="ButtonType.Outline" Style="margin: 1rem;"
                    Class="kizuku-button"
                    OnClick="ViewModel.HandleRegistration" disabled="@State.IsProcessing">
                @if (State.IsProcessing) { <span>Processing...</span> } else { <span>Sign Up</span> }
            </Button>
        }
    </CardFooter>
</Card>