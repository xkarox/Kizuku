@* Style="min-width: 80rem; max-width: 80rem;" *@
<Card>
    <CardHeader>
        <div style="display: flex; flex-direction: row; gap: 1rem; align-items: center; justify-content: center;">
            <div @onclick="() => SetLoginState(true)" style="cursor: pointer">
                <Text Content="Sign in" SizeInRem="2" Weight="FontWeights.W900"
                      GradientColors="@(_loginState ? Colors.PrimarySecondary : Colors.TextDisabled)" ShowGradient/>
            </div>
            <div>
                <Text Content="/" SizeInRem="1" Weight="FontWeights.W900"
                      GradientColors="@Colors.PrimarySecondary" ShowGradient/>
            </div>
            <div @onclick="() => SetLoginState(false)" style="cursor: pointer">
                <Text Content="Sign up" SizeInRem="2" Weight="FontWeights.W900"
                      GradientColors="@(_loginState ? Colors.TextDisabled : Colors.PrimarySecondary)" ShowGradient/>
            </div>
        </div>
    </CardHeader>
    
    <CardContent>
        @if (_loginState)
        {
            <Animate Type="AnimationType.Fade" FromOpacity="0" ToOpacity="100" Iteration="1"  Duration="0.3s">
                <div style="display: flex; flex-direction: column; gap: 1rem;">
                    <Input Label="Email" Placeholder="Your Email" TItem="string"
                           @bind-Value="_email" Style="width: 15rem"/>
                    <Input Label="Password" Placeholder="Your Password" TItem="string" 
                           @bind-Value="_password" Type="password" Style="width: 15rem" Error="true"/>
                </div>
            </Animate>
        }
        // registration state
        else
        {
            <Animate Type="AnimationType.Fade" FromOpacity="0" ToOpacity="100" Iteration="1" Duration="0.3s">
                <div style="display: flex; flex-direction: column; gap: 1rem;">
                    <Input Label="Username" Placeholder="Your desired username" 
                           @bind-Value="_username" TItem="string" Style="width: 15rem"/>
                    <Input Label="Email" Placeholder="Your Email"
                           @bind-Value="_email" TItem="string" Style="width: 15rem"/>
                    <Input Label="Password" Placeholder="Your Password"
                           @bind-Value="_password" TItem="string" Type="password" Style="width: 15rem"/>
                    <Input Label="Repeat Password" Placeholder="Repeat Your Password"
                           @bind-Value="_passwordRepeated" TItem="string" Type="password" Style="width: 15rem"/>
                </div>
            </Animate>
        }
    </CardContent>
    
    <CardFooter>
        <Button Type="ButtonType.Outline" Icon="arrow_back" Style="margin: 1rem"
            OnClick="BackButtonClicked"></Button>
        @if (_loginState)
        {
            <Button Type="ButtonType.Outline" Style="margin: 1rem; 
            background-color: #8937DB; color: white;"
                    OnClick="LoginButtonClicked">Sign In</Button>
        }
        else
        {
            <Button Type="ButtonType.Outline" Style="margin: 1rem; 
            background-color: #8937DB; color: white;"
                    OnClick="RegistrationButtonClicked">Sign Up</Button>
        }
    </CardFooter>
</Card>

@code {
    [Parameter] public Action<string, string>? OnLoginButtonClicked { get; set; }
    [Parameter] public Action<string, string, string>? OnRegistrationButtonClicked { get; set; }
    [Parameter] public Func<string, bool>? PasswordValidator { get; set; }
    [Parameter] public Action? OnBackButtonClicked { get; set; }

    private string _email = string.Empty;
    private string _password = string.Empty;
    private string _passwordRepeated = string.Empty;
    private string _username = string.Empty;

    private string _passwordRegistrationError = string.Empty;

    private bool _loginState = true;

    private void SetLoginState(bool isLogin)
    {
        _loginState = isLogin;
    }

    private void LoginButtonClicked()
    {
        OnLoginButtonClicked?.Invoke(_email, _password);
    }

    private void RegistrationButtonClicked()
    {
        if (!PasswordsMatch())
        {
            _passwordRegistrationError = "Passwords do not match";
        }
        else
        {
            _passwordRegistrationError = string.Empty;
        }
        StateHasChanged();
        if (PasswordValidator != null)
        {
            if (!PasswordValidator(_password))
            {
                return;
            }
        }

        OnRegistrationButtonClicked?.Invoke(_username, _email, _password);
    }
    
    private void BackButtonClicked()
    {
        OnBackButtonClicked?.Invoke();
    }

    private bool PasswordsMatch()
    {
        if (string.IsNullOrWhiteSpace(_password) || string.IsNullOrWhiteSpace(_passwordRepeated))
            return false;
        return _password.Equals(_passwordRepeated);
    }
}