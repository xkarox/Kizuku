@using Frontend.Services.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject Initialization init
@inject IAuthenticationServiceUI AuthServiceUi
@inject NavigationManager NavigationManager

<div @onclick="init.HandleMainLayoutClickEvent">
    <NavigationMenu>
        <div class="flex-row" style="justify-content: space-between; height:  5vh">
            <div class="flex-row">
                <div @onclick="NavigateToIndex" class="center-hv" style="cursor: pointer;margin: 0.5rem 1.5rem 0.5rem 1rem;">
                    <Text Content="Kizuku" Color="@Colors.Primary"
                          Weight="FontWeights.W600" SizeInRem="2"></Text>
                </div>
                <AuthorizeView>
                    <Authorized>
                        <NavMenuItem Id="nav-modules" Title="Modules" Url="/Modules"/>
                    </Authorized>
                </AuthorizeView>
            </div>
            <AuthorizeView>
                <NotAuthorized>
                    <div class="flex-row">
                        @if (!IsAuthenticationPage())
                        {
                            <Button OnClick="NavigateToAuthentication"
                                    Style="border: none; height: 36px"
                                    Class="kizuku-button">
                                <span>
                                    Sign In
                                </span>
                            </Button>
                        }

                        <Button Type="ButtonType.Icon" Icon="@_themeIcon" OnClick="ToggleTheme"
                                Style="margin: 0.5rem"></Button>
                    </div>
                </NotAuthorized>
                <Authorized>
                    <div class="flex-row center-hv">
                        <NavMenuItem Id="nav-user-info" Title="User Info" Url="/user-info"/>
                        <Button OnClick="HandleLogout"
                                Style="border: none; height: 36px"
                                Class="kizuku-button">
                            <span>
                                Sign Out
                            </span>
                        </Button>
                        <Button Type="ButtonType.Icon" Icon="@_themeIcon" OnClick="ToggleTheme"
                                Style="margin: 0.5rem"></Button>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
    </NavigationMenu>
    <div style="height: 95vh;" class="center-h">
        @Body
    </div>
</div>

@code
{
    private string _textColor = string.Empty;
    private string _themeIcon = string.Empty;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // This initializes the theme for the components.
        // Then you can use init.ToggleTheme() to toggle between light and dark modes.    
        if (firstRender)
        {
            await init.InitializeTheme();
            this.UpdateThemeColorAndIcon();
        }; 
    }
    
    private async Task HandleLogout()
    {
        await AuthServiceUi.Logout();
        NavigationManager.NavigateTo("/");
    }

    private void NavigateToAuthentication()
    {
        NavigationManager.NavigateTo("/authentication");
    }
    
    private void NavigateToIndex()
    {
        NavigationManager.NavigateTo("/");
    }
    
    private void NavigateToModules()
    {
        NavigationManager.NavigateTo("/Modules");
    }
    
    private void ToggleTheme()
    {
        init.ToggleTheme();
        this.UpdateThemeColorAndIcon();
    }
    
    private void UpdateThemeColorAndIcon()
    {
        var currentTheme = init.CurrentTheme;
        _textColor = currentTheme == "light" ? "black" : "white";
        _themeIcon = currentTheme == "light" ? "light_mode" : "dark_mode"; 
        StateHasChanged();
    }

    private bool IsAuthenticationPage()
    {
        var uri = new Uri(NavigationManager.Uri);
        return uri.AbsolutePath.Equals("/authentication", StringComparison.OrdinalIgnoreCase);
    }
}