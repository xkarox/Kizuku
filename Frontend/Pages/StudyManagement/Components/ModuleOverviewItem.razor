@using System.Drawing
@using Core.Entities
@using Syncfusion.Blazor.ProgressBar
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
<div class="module-overview-item center-hv" style="margin: @Margin">
    @if (!Dummy)
    {
        <SfCard>
            <CardContent>
                <div class="flex-col space-between">
                
                    <div class="module-overview-item-content center-hv flex-row text-white font-light">
                        <text>@FormatNameToMaxLength21(Module.Name)</text>
                        <div class="vl"></div>
                        <div class="center-h flex-row">
                            <text>@(_percent + "%")</text>
                        </div>
                        <div class="vl"></div>
                        <div class="center-h flex-row" id="module-item-buttons">
                            <SfButton Type="button" role="button" CssClass="e-normal flex-col justify-center items-center" 
                                      OnClick="@(() => ViewModel.SelectModuleButtonHandlerCommand.Execute(Module))">
                                <SfIcon Name="IconName.ChevronRight" ></SfIcon>
                            </SfButton>
                            <div style="margin: 0 1rem 0 1rem;"></div>
                            <SfButton Type="button" role="button" CssClass="e-normal flex-col justify-center items-center"
                                      OnClick="() => ViewModel.DeleteModuleButtonHandler(Module)">
                                <SfIcon Name="IconName.Trash" ></SfIcon>
                            </SfButton>
                        </div>
                    </div>
                    <div style="padding: 0.5rem;">
                        <SfProgressBar Type="ProgressType.Linear" Height="12"
                                       Value="@((_percent as Double?) ?? 0.0)" Minimum="0" Maximum="100"
                                       IsIndeterminate="@true"
                                       IsActive="@true">
                            <ProgressBarAnimation Enable="true" Duration="2000" Delay="0" />
                        </SfProgressBar>
                    </div>
                </div>
            </CardContent>
        </SfCard>
    }
</div>
@code { 
    [CascadingParameter(Name = "ViewModel")]
    public required StudyManagementViewModel ViewModel { get; set; }
    
    [Parameter] public required Module Module { get; set; }
    [Parameter] public string Margin { get; set; } = "1rem";
    [Parameter] public bool Dummy { get; set; } = false;
    private Random? _random;
    private int? _percent;  
    
    
    public override Task SetParametersAsync(ParameterView parameters)
    {
        _random ??= new Random();
        _percent ??= _random.Next(0, 100);//.ToString("P1");
        return base.SetParametersAsync(parameters);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }


    private string FormatNameToMaxLength21(string name)
    {
        if (name.Length <= 18) return name;
        name = name.Substring(0, 16);
        name = name + "..";
        return name;
    }

}